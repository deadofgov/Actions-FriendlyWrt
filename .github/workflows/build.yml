on:
  watch:
    types: started

jobs:
  prepare_release:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:
    - name: Get release tag
      id: release_tag
      run: |
        release_tag="FriendlyWrt-$(date +%Y-%m-%d)"
        echo "release_tag=$release_tag" >> $GITHUB_OUTPUT

    - name: Create empty release
      id: release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.release_tag.outputs.release_tag }}
        draft: false
        prerelease: false
    outputs:
      release_tag: ${{ steps.release_tag.outputs.release_tag }}
      upload_url: ${{ steps.release.outputs.upload_url }}

  build_friendlywrt:
    needs: prepare_release
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    strategy:
      matrix:
        VERSION: ['23.05', '24.10']
        SET: [non-docker]  # Только non-docker

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Cache toolchain
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/repo
          project/toolchain
          project/friendlywrt/staging_dir
        key: friendlywrt-toolchain-${{ matrix.VERSION }}-${{ hashFiles('**/Makefile', '**/*.mk') }}
        restore-keys: |
          friendlywrt-toolchain-${{ matrix.VERSION }}-
          friendlywrt-toolchain-

    - name: Cache downloads
      uses: actions/cache@v3
      with:
        path: project/friendlywrt/dl
        key: friendlywrt-dl-${{ matrix.VERSION }}-${{ hashFiles('project/friendlywrt/feeds.conf.default') }}
        restore-keys: |
          friendlywrt-dl-${{ matrix.VERSION }}-
          friendlywrt-dl-

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        wget https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh
        sed -i -e 's/^apt-get -y install openjdk-8-jdk/# apt-get -y install openjdk-8-jdk/g' install.sh
        sed -i -e 's/^\[ -d fa-toolchain \]/# [ -d fa-toolchain ]/g' install.sh
        sed -i -e 's/^(cat fa-toolchain/# (cat fa-toolchain/g' install.sh
        sed -i -e 's/^(tar xf fa-toolchain/# (tar xf fa-toolchain/g' install.sh
        sudo -E bash ./install.sh
        sudo -E git config --global user.name 'GitHub Actions'
        sudo -E git config --global user.email 'noreply@github.com'
        git clone https://github.com/friendlyarm/repo
        sudo -E cp repo/repo /usr/bin/
        mkdir -p ./artifact
        sudo swapoff -a
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /usr/local/share/boost /opt/ghc
        echo "cores: $(nproc)"

    - name: Download source
      run: |
        mkdir -p project
        cd project
        repo init --depth=1 -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v${{ matrix.VERSION }} \
                -m rk3399.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle

        repo sync -c friendlywrt --no-clone-bundle
        repo sync -c configs --no-clone-bundle
        repo sync -c device/common --no-clone-bundle
        repo sync -c device/friendlyelec --no-clone-bundle
        repo sync -c scripts --no-clone-bundle
        repo sync -c scripts/sd-fuse  --no-clone-bundle
        repo sync -c toolchain  --no-clone-bundle

    - name: Fix feeds configuration and add packages
      run: |
        cd project/friendlywrt
        
        # Сначала настраиваем feeds с зависимостями
        cat >> feeds.conf.default <<EOF
        src-git packages https://github.com/openwrt/packages.git
        src-git luci https://github.com/openwrt/luci.git  
        src-git routing https://github.com/openwrt-routing/packages.git
        src-git telephony https://github.com/openwrt/telephony.git
        EOF
        
        # Обновляем feeds
        ./scripts/feeds update -a
        
        # Устанавливаем базовые зависимости перед добавлением кастомных пакетов
        ./scripts/feeds install -a -d y
        
        # Устанавливаем критичные host-зависимости
        ./scripts/feeds install golang/host rust/host
        ./scripts/feeds install luci-base/host csstidy/host luasrcdiet/host
        
        # Устанавливаем runtime зависимости
        ./scripts/feeds install libev libsodium libcares libudns c-ares
        ./scripts/feeds install boost boost-program_options boost-system
        ./scripts/feeds install coreutils coreutils-base64 coreutils-nohup curl
        ./scripts/feeds install luci-compat luci-lib-jsonc luci-lua-runtime luci-base

    - name: Apply customizations
      run: |
        cd project
        source ../scripts/add_packages.sh
        source ../scripts/custome_config.sh
        
        # После добавления кастомных пакетов, обновляем feeds еще раз
        cd friendlywrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Prepare dot config and feeds
      run: |
        cd project
        DIRNAME=friendlywrt$(echo ${{ matrix.VERSION }}|awk -F . '{print $1}')
        CONFIG=rockchip
        cat > .current_config.mk <<EOL
        . device/friendlyelec/rk3399/base.mk
        TARGET_IMAGE_DIRNAME=${DIRNAME}
        TARGET_FRIENDLYWRT_CONFIG=${CONFIG}
        EOL
        DEBUG_DOT_CONFIG=1 ./build.sh friendlywrt

    - name: Download package
      run: |
        cd project/friendlywrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile friendlyWrt
      id: compile
      continue-on-error: true
      run: |
        cd project/friendlywrt
        make -j$(nproc) || make -j1 V=s
        echo $?

    - name: Check the result and try again
      if: steps.compile.outcome == 'failure'
      run: |
        cd project/friendlywrt
        make -j1 V=s

    - name: Create rootfs package
      id: create_rootfs_package
      run: |
        cd project
        source .current_config.mk
        rootfs_filename="rootfs-friendlywrt-${{ matrix.VERSION }}.tgz"
        tar cvzf ../artifact/${rootfs_filename} ${FRIENDLYWRT_SRC}/${FRIENDLYWRT_ROOTFS} \
              ${FRIENDLYWRT_SRC}/${FRIENDLYWRT_PACKAGE_DIR}
        echo "rootfs_filename=$rootfs_filename" >> $GITHUB_OUTPUT

    - name: Upload rootfs package
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/${{ steps.create_rootfs_package.outputs.rootfs_filename }}
        asset_name: ${{ steps.create_rootfs_package.outputs.rootfs_filename }}
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        overwrite: true

  build_img:
    needs: [prepare_release,build_friendlywrt]
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    strategy:
      matrix:
        VERSION: ['23.05', '24.10']
        CPU: [rk3328]  # Только rk3328 для R2S-R2C-Series
        SET: [non-docker]  # Только non-docker
        
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Cache kernel and uboot
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/repo
          project/kernel
          project/u-boot
          project/rkbin
          project/toolchain
        key: friendlywrt-kernel-${{ matrix.CPU }}-${{ matrix.VERSION }}-${{ hashFiles('**/Makefile', '**/*.mk') }}
        restore-keys: |
          friendlywrt-kernel-${{ matrix.CPU }}-${{ matrix.VERSION }}-
          friendlywrt-kernel-${{ matrix.CPU }}-
          friendlywrt-kernel-

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d
        wget https://raw.githubusercontent.com/friendlyarm/build-env-on-ubuntu-bionic/master/install.sh
        sed -i -e 's/^apt-get -y install openjdk-8-jdk/# apt-get -y install openjdk-8-jdk/g' install.sh
        sed -i -e 's/^\[ -d fa-toolchain \]/# [ -d fa-toolchain ]/g' install.sh
        sed -i -e 's/^(cat fa-toolchain/# (cat fa-toolchain/g' install.sh
        sed -i -e 's/^(tar xf fa-toolchain/# (tar xf fa-toolchain/g' install.sh
        sudo -E bash ./install.sh
        sudo -E git config --global user.name 'GitHub Actions'
        sudo -E git config --global user.email 'noreply@github.com'
        git clone https://github.com/friendlyarm/repo
        sudo -E cp repo/repo /usr/bin/
        mkdir -p ./artifact
        sudo swapoff -a
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /usr/local/share/boost /opt/ghc
        echo "cores: $(nproc)"

    - name: Download source
      run: |
        mkdir -p project
        cd project
        repo init --depth=1 -u https://github.com/friendlyarm/friendlywrt_manifests -b master-v${{ matrix.VERSION }} \
                -m ${{ matrix.CPU }}.xml --repo-url=https://github.com/friendlyarm/repo  --no-clone-bundle

        repo sync -c kernel --no-clone-bundle
        repo sync -c u-boot --no-clone-bundle
        repo sync -c rkbin --no-clone-bundle
        repo sync -c configs --no-clone-bundle
        repo sync -c device/common --no-clone-bundle
        repo sync -c device/friendlyelec --no-clone-bundle
        repo sync -c scripts --no-clone-bundle
        repo sync -c scripts/sd-fuse  --no-clone-bundle
        repo sync -c toolchain  --no-clone-bundle

    - name: Download friendlywrt rootfs
      uses: robinraju/release-downloader@v1.6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        repository: ${{ github.repository }}
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        fileName: "rootfs-friendlywrt-${{ matrix.VERSION }}.tgz"

    - name: Prepare config
      id: config
      run: |
        cd project
        MODEL=R2S-R2C-Series
        FILENAME=${MODEL}-FriendlyWrt-${{ matrix.VERSION }}.img
        DIRNAME=friendlywrt$(echo ${{ matrix.VERSION }}|awk -F . '{print $1}')
        CONFIG=rockchip
        cat > .current_config.mk <<EOL
        . device/friendlyelec/${{ matrix.CPU }}/base.mk
        TARGET_IMAGE_DIRNAME=${DIRNAME}
        TARGET_FRIENDLYWRT_CONFIG=${CONFIG}
        TARGET_SD_RAW_FILENAME=${FILENAME}
        EOL
        echo "img_filename=$FILENAME" >> $GITHUB_OUTPUT

    - name: Unpack friendlywrt rootfs
      run: |
        cd project
        tar xvzf "../rootfs-friendlywrt-${{ matrix.VERSION }}.tgz"

    - name: Compile uboot and kernel
      run: |
        cd project
        ## If you need to modify the kernel configuration, please edit the script below
        # source ../scripts/custome_kernel_config.sh

        ./build.sh uboot
        ./build.sh kernel

        ## If you want to compile a driver from source, here is an example
        # case ${{ matrix.CPU }} in
        # rk3568)
        #     ../scripts/3rd/add_r8125.sh
        #     ;;
        # esac

    - name: Build sd image
      id: build_sd_image
      run: |
        cd project
        ./build.sh sd-img
        mv out/${{ steps.config.outputs.img_filename }} ../artifact/
        cd ../artifact/
        gzip *.img
        

    - name: Upload image to release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./artifact/${{ steps.config.outputs.img_filename }}.gz
        asset_name: ${{ steps.config.outputs.img_filename }}.gz
        tag: ${{ needs.prepare_release.outputs.release_tag }}
        overwrite: true
